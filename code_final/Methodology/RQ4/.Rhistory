cog = read_csv('/Users/dorianbenutzer/Desktop/PlosOne/Comparing_online_connection_strategies_of_innovative_companies/code_final/Methodology/RQ3/cognitive_proximity_numeric.csv')
library(readr)
library(stargazer)
library(car)
library(lmtest)
library(sandwich)
norm <- function(vec){
maxx = max(vec)
minn = min(vec)
norm_vec = c()
for(i in 1:length(vec)){
val = vec[i]
val_norm = (val-minn)/(maxx-minn)
norm_vec = c(norm_vec,val_norm)
}
return(norm_vec)
} # normalizing for improved data visualization
########################################################################
# Data
########################################################################
company_data = read_csv('company_data_regression.csv')
company_data = company_data[!(company_data$abi %in%  c(712510839,401877377)),] # exclude Facebook and Twitter
########################################################################
# Data
########################################################################
company_data = read_csv('/Users/dorianbenutzer/Desktop/PlosOne/code/Methodology/RQ4/company_data_regression.csv.csv')
########################################################################
# Data
########################################################################
company_data = read_csv('/Users/dorianbenutzer/Desktop/PlosOne/code/Methodology/RQ4/company_data_regression.csv')
cog = read_csv('/Users/dorianbenutzer/Desktop/PlosOne/Comparing_online_connection_strategies_of_innovative_companies/code_final/Methodology/RQ3/cognitive_proximity_numeric.csv')
cog = read_csv('/Users/dorianbenutzer/Desktop/PlosOne/code/Methodology/RQ4/cognitive_proximity_numeric.csv')
sliding_window = 0.2
start = 0.2
target <- company_data$company_names
df = cog
cog1 = df[match(target, df$nodes),]
company_data[company_data$company_names != cog1$nodes,]
company_data$y1 = ((cog1$cog_proxi_h))
company_data$y2 = ((cog1$cog_proxi_f))
df = company_data[!is.na(company_data$y1),]
df = df[!is.na(df$y2),]
df$y1 = norm(log(df$y1+1))
df$y2 = norm(log(df$y2+1))
company_data = df
company_data$category = 0
counter=0
for(i in 1:nrow(company_data)){
if ( company_data[i,9]>start && company_data[i,10]>start){
if( company_data[i,9] <= (company_data[i,10]+sliding_window) && company_data[i,9] >=( company_data[i,10]-sliding_window)){
company_data$category[i] = 1
counter= counter+1
}
}
}
counter
ggplot( aes(y1,y2, color=factor(category)),data=company_data)+geom_point()+
scale_color_manual(values=c("blue", "red"))+ xlab("Hyperlink Network")+ylab("Follower Network")
library(readr)
library(stargazer)
library(car)
library(lmtest)
library(sandwich)
library(ggplot2)
ggplot( aes(y1,y2, color=factor(category)),data=company_data)+geom_point()+
scale_color_manual(values=c("blue", "red"))+ xlab("Hyperlink Network")+ylab("Follower Network")
logit_m1 = glm(category~year+log(sales+1)+log(empl+1), family = 'binomial', data = company_data)
stargazer(logit_m1, type='text')
vif(logit_m1)
coeftest(logit_m1, vcov=vcovHC(logit_m1))
##################
# Hyperlinks
##################
m1 = lm((log(y1+1)) ~ (year)+(log(sales+1))+(log(empl+1)), df4)
df4 = df
##################
# Hyperlinks
##################
m1 = lm((log(y1+1)) ~ (year)+(log(sales+1))+(log(empl+1)), df4)
#summary(m1)
stargazer(m1,type="text")
vif(m1)
coeftest(m1, vcov=vcovHC(m1))
##################
# Follower
##################
m2 = lm((log(y2+1)) ~ (year) +log(sales+1)+log(empl+1),df4)
#summary(m2)
summary(m2,type="text")
# check for correlation between the coefficients
vif(m2)
# calculate robust standart errors
coeftest(m1, vcov=vcovHC(m1))
coeftest(m2, vcov=vcovHC(m2))
m1
#summary(m1)
stargazer(m1,type="text")
coeftest(m2, vcov=vcovHC(m2))
m2
#summary(m2)
summary(m2,type="text")
coeftest(m2, vcov=vcovHC(m2))
stargazer(m2, type='text')
summary(1)
summary(m1)
logit_m1 = glm(category~year+log(sales+1)+log(empl+1), family = 'binomial', data = company_data)
stargazer(logit_m1, type='text')
summary(logit_m1)
ggplot( aes(y1,y2, color=factor(category)),data=company_data)+geom_point()+
scale_color_manual(values=c("blue", "red"))+ xlab("Hyperlink Network")+ylab("Follower Network")
